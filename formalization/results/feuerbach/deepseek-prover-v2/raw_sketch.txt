```lean
import Mathlib.Data.Real.Basic
import Mathlib.Data.Set.Basic

open Set

-- open_ball_def
def openBall (x : ℝ × ℝ) (r : ℝ) : Set (ℝ × ℝ) :=
  {y | Real.sqrt ((y.1 - x.1) ^ 2 + (y.2 - x.2) ^ 2) < r}

-- closed_ball_def
def closedBall (x : ℝ × ℝ) (r : ℝ) : Set (ℝ × ℝ) :=
  {y | Real.sqrt ((y.1 - x.1) ^ 2 + (y.2 - x.2) ^ 2) ≤ r}

-- open_ball_nonempty
lemma openBall_nonempty {x : ℝ × ℝ} {r : ℝ} (hr : 0 < r) : (openBall x r).Nonempty :=
  by sorry

-- open_ball_subset_closed_ball
lemma openBall_subset_closedBall {x : ℝ × ℝ} {r₁ r₂ : ℝ} (h : r₁ < r₂) :
    openBall x r₁ ⊆ closedBall x r₂ :=
  by sorry

-- open_ball_open
lemma openBall_isOpen {x : ℝ × ℝ} {r : ℝ} (hr : 0 < r) : IsOpen (openBall x r) :=
  by sorry

-- closed_ball_closed
lemma closedBall_isClosed {x : ℝ × ℝ} {r : ℝ} (hr : 0 < r) : IsClosed (closedBall x r) :=
  by sorry

-- open_ball_center
lemma mem_openBall_center {x : ℝ × ℝ} {r : ℝ} (hr : 0 < r) : x ∈ openBall x r :=
  by sorry
```